<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTTP基本概念</title>
    <url>/2022/10/17/HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="HTTP基本概念"><a href="#HTTP基本概念" class="headerlink" title="HTTP基本概念"></a>HTTP基本概念</h1><p><strong>HTTP：</strong> Hyper Text Transfer Protocol ,超文本传输协议</p>
<p><strong>消息模型</strong> ： 客户端发送一条请求消息，而后由服务器返回一条响应消息。</p>
<h2 id="1-HTTP基本概念"><a href="#1-HTTP基本概念" class="headerlink" title="1.HTTP基本概念"></a>1.HTTP基本概念</h2><p>所有HTTP信息（请求与响应）中都包含一个或几个单行显示的消息头（header），然后是一个强制空白行，最后是消息主体（可选）。</p>
<p><strong>HTTP请示头</strong>：</p>
<ul>
<li><p><strong>GET:</strong> 主要作用是从Web服务器获取一个资源。GET请求并没有消息主题，因此在消息头后的空白行中没有其他数据。它所请求的URL通常由所请求的资源名称，以及一个包含客户端向该资源提交的参数的可选查询字符串组成。HTTP版本为1.1必须使用Host请求。</p>
</li>
<li><p><strong>HOST消息头：</strong> 用于指定出现在被访问的完整URL中的主机名称。如果几个Web站点以相同的一台服务器为主机，就需要使用Host消息头，因为请求第一行中的URL内通常并不包含主机名称。</p>
</li>
<li><p><strong>Accept</strong> ：Accept表示浏览器支持的MIME(Multipurpose Internet Mail Extensions , 多用途互联网邮件扩展)类型；浏览器支持的类型：</p>
<blockquote>
<p>text: 用于标准化表示的文本信息</p>
<p>text/html:表示html文档</p>
<p>application:用于传输应用程序数据或二进制数据</p>
<p>application/xhtml+xml:表示xhtml文档</p>
<p>application/xml:表示xml文档</p>
</blockquote>
<p>优先顺序是从左到右的排列顺序。</p>
</li>
<li><p><strong>Referer消息头：</strong> 用于表示发出请求的原始URL</p>
</li>
<li><p><strong>Accept-Language：</strong> 浏览器支持的语言</p>
</li>
<li><p>q是权重系数，范围0&lt;=q&lt;=1。q值越大，请求越倾向于“；”之前的类型表示的内容。若没有指定q，默认为1；若为0，用于提醒服务器哪些是浏览器不接受的内容类型</p>
</li>
<li><p><strong>User-Agent消息头：</strong> 提供与浏览器或其他生成请求的客户端软件有关的信息。</p>
</li>
<li><p><strong>Accept-Encoding:</strong> 浏览器支持的压缩编码是gzip和deflate</p>
</li>
<li><p><strong>Cookie消息头：</strong> 用于提交服务器向客户端发布的其他参数</p>
</li>
<li><p><strong>Connection：</strong> 表示持久的客户端与服务连接。</p>
</li>
</ul>
<h2 id="2-HTTP响应"><a href="#2-HTTP响应" class="headerlink" title="2.HTTP响应"></a>2.HTTP响应</h2><p>​    服务器响应返回的代码：</p>
<ul>
<li>HTTP/1.1 表示HTTP版本</li>
<li>200表示请求结果的数字状态码</li>
<li><strong>Server</strong>： 消息头中包含一个旗标，指明所使用的Web服务器软件。</li>
<li><strong>Set-Cookie</strong>: 消息头向浏览器发送另一个Cookie，它将在随后向服务器发送的请求中由Cookie消息头返回。</li>
<li><strong>Pragma：</strong>消息头指示浏览器不要将响应存在缓存中。</li>
<li><strong>Expires：</strong>消息头指出响应内容已经过期，因此不应保存在缓存中。当返回动态内容时常常会发送这些指令，以确保浏览器随时获得最新内容。</li>
</ul>
<p>除了GET和POST方法以外，HTTP协议还支持许多其他因特殊目的建立的方法，具体如下：</p>
<ul>
<li><strong>HEAD</strong>:方法的功能与GET方法相似，不同之处在于服务器不会在其响应中返回消息主体。这种方法可用于检查某一资源在向其提交GET请求钱是否存在。</li>
<li><strong>TRACE</strong>：主要用于诊断。用于检测客户端与服务器之间是否存在任何操纵请求的代理服务器。</li>
<li><strong>OPTIONS</strong>：这种方法要求服务器报告对某一特殊资源有效的HTTP方法。</li>
<li><strong>PUT</strong>：这个方法试图使用包含在请求主体的内容，向服务器上传指定的资源。</li>
</ul>
<h3 id="2-1-HTTP消息头"><a href="#2-1-HTTP消息头" class="headerlink" title="2.1 HTTP消息头"></a>2.1 HTTP消息头</h3><ol>
<li>请求消息头<ul>
<li>Host: 用来告知服务器，请求的资源所处的互联网主机名和端口号</li>
<li>User-Agent： 提供与浏览器或生成请求的其他客户端软件有关的信息</li>
<li>Accept： 告知服务器，客户端愿意接受哪些内容</li>
<li>Accept-Language</li>
<li>Accept-Encoding</li>
<li>Content-Type：表示具体请求中的媒体类型信息，确切的是客户端告知服务端，自己即将发送的请求消息携带的数据结构类型，好让服务端接收后以合适的方式处理。</li>
<li>Origin： 这个消息头用在跨域Ajax请求中，用于指示提出请求的域。</li>
<li>Referer： 这个消息头用于指示提出当前请求的原始URL</li>
<li>Cookie： 用于向服务器提交它以前发布的Cookie</li>
</ul>
</li>
<li>响应消息头<ul>
<li>Content-Type: 返回内容的MIME类型</li>
<li>Date：原始服务器消息发出的时间</li>
<li>Server： 提供所使用的Web服务器软件的相关信息</li>
<li>Set-Cookie：用于向浏览器发布Cookie，浏览器在随后的请求中将其返回给服务器。</li>
<li>Transfer-Encoding</li>
<li>Vary：告诉下游代理是使用缓存响应还是从原始服务器请求。</li>
<li>X-Frame-Options：指示浏览器框架是什么以及如何加载当前响应。</li>
</ul>
</li>
</ol>
<h3 id="2-2-Cookie"><a href="#2-2-Cookie" class="headerlink" title="2.2 Cookie"></a>2.2 Cookie</h3><p>​        服务器使用Cookie机制向客户端发送数据，客户端保存Cookie并将其返回服务器。与其他类型的请求参数（存在于URL查询字符串或消息主体中）不同，无需应用程序或用户采取任何措施。随后的每一个请求都会继续重新向服务器提交Cookie。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">Set-Cookie: <span class="hljs-attribute">tarcking</span>=tI8rk7joMx44S2Uu85nSWc<br><br>Cookie:<span class="hljs-attribute">tracking</span>=tI8rk7joMx44S2Uu85nSWc<br></code></pre></td></tr></table></figure>

<p>​        如上所示，Cookie一般由一个名/值对构成，但也可包含任何不含空格的字符串。可以在服务器响应中使用几个Set-Cookie消息头发布多个Cookie，并可在同一个Cookie消息头中用分号分隔不同的Cookie，将他们全部返回给服务器。</p>
<p>​        除Cookie的实际位外，Set-Cookie消息头可以包含一下任何可选属性</p>
<blockquote>
<p>Expires: 用于设定Cookie的有效时间</p>
<p>Domain：用于指定Cookie的有效域</p>
<p>Path：用于指定Cookie的有效URL</p>
<p>Secure： 如果设置这个属性，则仅在HTTPS请求中提交Cookie</p>
<p>HTTPOnly：如果设置这个属性，将无法通过客户端JavaScript直接访问Cookie</p>
</blockquote>
<h2 id="3-状态码"><a href="#3-状态码" class="headerlink" title="3.状态码"></a>3.状态码</h2><p>状态码可以分为五类：</p>
<blockquote>
<ol>
<li>1xx–提供信息。</li>
<li>2xx–请求被成功提交。</li>
<li>3xx–客户端被重定向其他资源。</li>
<li>4xx–客户端错误。</li>
<li>5xx–服务器执行请求时遇到错误</li>
</ol>
</blockquote>
<h2 id="4-URL编码"><a href="#4-URL编码" class="headerlink" title="4.URL编码"></a>4.URL编码</h2><p>​        URL只允许使用US-ASCII字符集中的可打印字符（也就是ASCII代码在0x20-0x27范围内的字符），而且，由于其在URL方案或HTTP协议内具有特殊含义，这个范围内的一些字符也不能用在URL中。</p>
<p>​        URL编码方案主要用于对扩展ASCII字符集中的任何有问题的字符进行编码，使其可通过HTTP安全传输。任何URL编码的字符都以“%”为前缀，其后是这个字符的两位十六进制ASCII代码。以下是常见的URL编码字符：</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">3d</span></span> 代表= ； <br><span class="hljs-tag">%<span class="hljs-selector-tag">25</span></span> 代表% ； <br><span class="hljs-tag">%<span class="hljs-selector-tag">20</span></span> 代表空格； <br><span class="hljs-tag">%<span class="hljs-selector-tag">0a</span></span> 代表新行； <br><span class="hljs-tag">%<span class="hljs-selector-tag">00</span></span> 代表空字节<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker简单命令</title>
    <url>/2022/11/08/Docker%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="1-查看容器"><a href="#1-查看容器" class="headerlink" title="1. 查看容器"></a>1. 查看容器</h2><p>列出已经创建的所有容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker ps -a    <br></code></pre></td></tr></table></figure>

<p>列出正在运行的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker ps -s <br></code></pre></td></tr></table></figure>

<h2 id="2-启动容器"><a href="#2-启动容器" class="headerlink" title="2. 启动容器"></a>2. 启动容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker start [container ID]<br></code></pre></td></tr></table></figure>

<h2 id="3-进入已经运行的容器"><a href="#3-进入已经运行的容器" class="headerlink" title="3. 进入已经运行的容器"></a>3. 进入已经运行的容器</h2><p>方法一（推荐）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker attach [container ID]<br></code></pre></td></tr></table></figure>

<p>方法二（未使用）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it [container ID] /bin/bash<br></code></pre></td></tr></table></figure>

<h2 id="4-退出容器"><a href="#4-退出容器" class="headerlink" title="4. 退出容器"></a>4. 退出容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure>

<h2 id="5-停用容器"><a href="#5-停用容器" class="headerlink" title="5. 停用容器"></a>5. 停用容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker stop [container ID]<br></code></pre></td></tr></table></figure>



<p>参考:<a href="https://blog.csdn.net/jghiof/article/details/117687974?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-117687974-blog-124920551.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-117687974-blog-124920551.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=1">Docker简单容器命令</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali初始配置</title>
    <url>/2022/11/08/Kali%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Kali-初始化配置"><a href="#Kali-初始化配置" class="headerlink" title="Kali 初始化配置"></a>Kali 初始化配置</h1><h2 id="1-更换源"><a href="#1-更换源" class="headerlink" title="1. 更换源"></a>1. 更换源</h2><ol>
<li><p>查找kali源</p>
<p><a href="https://developer.aliyun.com/mirror/">阿里镜像站</a></p>
</li>
<li><p>更换kali源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure></li>
<li><p>更新升级kali内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo apt update<br></code></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/qq_53030229/article/details/123125352">Kali更换源</a></p>
</li>
</ol>
<h2 id="2-安装中文输入法（ibus）"><a href="#2-安装中文输入法（ibus）" class="headerlink" title="2. 安装中文输入法（ibus）"></a>2. 安装中文输入法（ibus）</h2><ol>
<li><p>打开终端，安装ibus输入法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get install ibus ibus-pinyin<br></code></pre></td></tr></table></figure></li>
<li><p>输入 im-config</p>
<p>若出错，提示安装zenity</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get install zenity<br></code></pre></td></tr></table></figure></li>
<li><p>再次输入im-config</p>
<p>依次点击 “确定”-“是”</p>
<p>选中<strong>“ibus”</strong>，然后点击确定</p>
<p>确定后，又会弹出一个框，确定</p>
</li>
<li><p>输入 ibus-setup</p>
<p>“添加-中文-pinyin-添加”即可</p>
</li>
<li><p>最后一步，重启即可 (reboot)</p>
</li>
</ol>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/114211319">kali怎么安装中文输入法</a></p>
<h2 id="3-安装git"><a href="#3-安装git" class="headerlink" title="3. 安装git"></a>3. 安装git</h2><ol>
<li><p>安装git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get install git<br></code></pre></td></tr></table></figure></li>
<li><p>添加git服务用户</p>
<p>邮箱：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;email@163.com&quot;</span><br></code></pre></td></tr></table></figure>

<p>用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Double-Blank&quot;</span> <br></code></pre></td></tr></table></figure>

<p>使用命令查看是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --global --list<br></code></pre></td></tr></table></figure></li>
<li><p>生成ssh公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;email@163.com&quot;</span><br></code></pre></td></tr></table></figure></li>
<li><p>在代码托管平台上添加SSH公匙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mousepad /home/advance/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure></li>
</ol>
<p>参考：<a href="https://blog.csdn.net/weixin_42815873/article/details/121977771">在kali linux上安装git与push提交</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Python注释</title>
    <url>/2022/05/29/Python%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h1 id="注释的分类"><a href="#注释的分类" class="headerlink" title="注释的分类"></a>注释的分类</h1><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>利用    “<code>#</code> “<br>例如    <code># 单行注释 - 在此处写下下一行代码的含义</code></p>
<h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&#x27;&#x27;&#x27;  注释信息 &#x27;&#x27;&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot; 注释信息 &quot;&quot;&quot;</span><br>多行行首添加<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure>

<h2 id="特殊注释"><a href="#特殊注释" class="headerlink" title="特殊注释"></a>特殊注释</h2><p><code>#!/usr/bin/python</code> 表明python解释器所在路径，一般在Linux下使用</p>
<p><code># encoding=utf-8</code>（中文支持）<br><strong>注：Python3直接支持，Python2默认不支持</strong><br><strong># encoding=utf-8、# coding=utf-8</strong><br><strong>正规的Python推荐写法：# <em>*</em> coding:utf-8 <em>*</em></strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt</title>
    <url>/2022/04/19/QT%205.9%20C++%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>explicit 不能显示转换</p>
]]></content>
      <categories>
        <category>QT</category>
      </categories>
  </entry>
  <entry>
    <title>hexo搭建网站</title>
    <url>/2022/10/19/hexo%E5%BB%BA%E7%AB%99/</url>
    <content><![CDATA[<p>本网站只做搭建blog及遇到的问题记录</p>
<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><ol>
<li><p><strong>安装git</strong></p>
</li>
<li><p><strong>安装node</strong>（注意：下面操作都在git中进行）</p>
<p>检测node安装是否成功：</p>
<blockquote>
<p><code>node -v</code>（返回node版本号）</p>
<p><code>npm -v</code>（返回npm版本号）</p>
</blockquote>
</li>
<li><p><strong>安装hexo</strong></p>
<blockquote>
<p>安装完nodejs后通过以下命令安装hexo</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g <br></code></pre></td></tr></table></figure>

<p>hexo安装完成后查看版本号</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo -v</span><br></code></pre></td></tr></table></figure></blockquote>
</li>
</ol>
<h1 id="初始化操作过程"><a href="#初始化操作过程" class="headerlink" title="初始化操作过程"></a>初始化操作过程</h1><ol>
<li>在本地建立blog文件夹（注意：以下操作要在blog根目录下执行）</li>
<li><code>hexo init</code>（初始化hexo）</li>
<li><code>hexo s</code>（启动hexo,然后就能在本地<a href="https://links.jianshu.com/go?to=http://localhost:4000">http://localhost:4000</a>查看自己的网站了）</li>
</ol>
<h1 id="连接GitHub与本地"><a href="#连接GitHub与本地" class="headerlink" title="连接GitHub与本地"></a>连接GitHub与本地</h1><p>首先右键打开git bash，然后输入下面命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;githubname&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;xxxx@xx.com&quot;</span><br></code></pre></td></tr></table></figure>

<p>用户名和邮箱根据注册的github的信息自行修改。</p>
<p>然后生成密钥SSH key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;xxxx@xx.com&quot;</span><br></code></pre></td></tr></table></figure>

<p>打开<a href="https://link.zhihu.com/?target=http://github.com/">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随意，输入生成的ssh密钥。</p>
<p>gitbash输入<code>ssh -T git@github.com</code>，如果如下图Fig1所示，出现你的用户名，那就成功了。</p>
<img src="/2022/10/19/hexo%E5%BB%BA%E7%AB%99/fig1.png">

<p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p>
<p>修改最后一行的配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repository: https://github.com/xxxxxxx/xxxxxxx.github.io<br>  branch: master<br></code></pre></td></tr></table></figure>

<p>repository修改为自己的github项目地址。</p>
<h1 id="发布文章到GitHub"><a href="#发布文章到GitHub" class="headerlink" title="发布文章到GitHub"></a>发布文章到GitHub</h1><ol>
<li><p><strong>写文章</strong></p>
<p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p>
<p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p>
<p>之后打开<code>..\blog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个是文章文件。</p>
</li>
<li><p><strong>发布</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g	<br>hexo s	//可以本地查看静态网站http://localhost:4000<br>hexo d<br></code></pre></td></tr></table></figure></li>
</ol>
<h1 id="Git问题"><a href="#Git问题" class="headerlink" title="Git问题"></a>Git问题</h1><ol>
<li><p><strong>重置 windows 10后，因为更新了用户名，造成之前的所以 git 仓库，都无法直接拉取代码</strong></p>
<p><strong>解决方案：</strong>选择git仓库文件夹-&gt;右键-&gt;属性-&gt;安全-&gt;高级-&gt;所有者更改-&gt;高级-&gt;立即查找-&gt;找到当前账户-&gt;确定-&gt;勾选替换子容器和对象所有者、使用可从对象继承的权限项目替换所有子对象的权限项目。</p>
</li>
<li><p><strong>运行git命令出现lf will be replaced by crlf 的解决方法</strong></p>
<p><strong>解决方案：</strong>出现这样的现象的解决思路windows中的换行符为 CRLF， 而在Linux下的换行符为LF，所以在执行add ，具体操作在方法如下：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">$ rm -rf <span class="hljs-string">.git</span>  <span class="hljs-string">//</span> 删除<span class="hljs-string">.git</span> <br>$ git config <span class="hljs-params">--global</span> core.autocrlf <span class="hljs-literal">false</span>  <span class="hljs-string">//</span>禁用自动转换<br></code></pre></td></tr></table></figure>

<p>然后重新执行：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>git init  <br><span class="hljs-variable">$ </span>git add .<br></code></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>BLOG</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Questions</tag>
      </tags>
  </entry>
  <entry>
    <title>中文乱码</title>
    <url>/2022/05/29/%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><pre><code class="hljs">比特位（Bit）：是计算机最小的存储单位，以0或1来表示比特位的值
字节（Byte）：是计算机中数据存储的基本单元，一字节等于一个8个比特位
字符（Character）：是一个信息单位，是各种文字和符号的统称
字符集（Character Set）：是某个范围内字符的集合，不同的字符集规定了不同字符的个数
字符码（Code Point）：字符集中每个字符的数字编号
字符编码（Character Encoding）：是将字符集中的字符码映射为字节流的一种具体实现方案，常见有ASCII 编码、UTF-8 编码、GBK 编码
编码（Encoding）：编码的过程是将字符转换成字节流
解码 （Decoding）：解码的过程是将字节流解析为字符
</code></pre>
<h1 id="乱码原因"><a href="#乱码原因" class="headerlink" title="乱码原因"></a>乱码原因</h1><p>计算机存储字符：</p>
<ul>
<li>首先把字符转换成数字</li>
<li>直接存储数字</li>
</ul>
<p>这样会产生两个问题：1.按照怎样的规范把字符转换成数字？2.按照怎样的方式存储数字（如：使用多少个字节？）</p>
<p><strong>所以乱码的解决方法也就从两个角度出发：编码与译码是否使用同一种方式；存储数字方式是否相同。</strong></p>
<p><em>注：utf-8采用可变字节存储方式</em></p>
]]></content>
      <categories>
        <category>common problem</category>
        <category>Garbled code</category>
      </categories>
      <tags>
        <tag>Garbled code</tag>
      </tags>
  </entry>
  <entry>
    <title>linux intasll Docker</title>
    <url>/2022/11/08/linux-intasll-Docker/</url>
    <content><![CDATA[<h1 id="Linux-安装-Docker"><a href="#Linux-安装-Docker" class="headerlink" title="Linux 安装 Docker"></a>Linux 安装 Docker</h1><h2 id="1-Ubuntu"><a href="#1-Ubuntu" class="headerlink" title="1. Ubuntu"></a>1. Ubuntu</h2><ol>
<li><p>卸载旧版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get remove docker docker-engine docker.io containerd runc<br></code></pre></td></tr></table></figure></li>
<li><p>终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt update<br>apt-get install ca-certificates curl gnupg lsb-release<br></code></pre></td></tr></table></figure></li>
<li><p>安装证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure></li>
<li><p>写入软件源信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo add-apt-repository <span class="hljs-string">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span><br></code></pre></td></tr></table></figure></li>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo apt-get install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure></li>
<li><p>启动Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl start docker<br></code></pre></td></tr></table></figure></li>
<li><p>安装工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get -y install apt-transport-https ca-certificates curl software-properties-common<br></code></pre></td></tr></table></figure></li>
<li><p>重启docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">service docker restart<br></code></pre></td></tr></table></figure></li>
<li><p>查看docker版本 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo docker version<br></code></pre></td></tr></table></figure></li>
<li><p>查看镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo docker images<br></code></pre></td></tr></table></figure></li>
</ol>
<p>参考：<a href="https://blog.csdn.net/u012563853/article/details/125295985">Ubuntu安装docker</a></p>
<h2 id="2-Kali-linux"><a href="#2-Kali-linux" class="headerlink" title="2. Kali linux"></a>2. Kali linux</h2><ol>
<li><p>添加Docker官方的GPG密钥</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">curl  -fsSL https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>debian/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure></li>
<li><p>更新源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;deb https://download.docker.com/linux/debian stretch stable&#x27;</span>&gt; /etc/apt/sources.list.d/docker.list<br></code></pre></td></tr></table></figure></li>
<li><p>直接导入证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get install apt-transport-https  ca-certificates  curl  gnupg2  software-properties-common<br></code></pre></td></tr></table></figure></li>
<li><p>系统更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get update<br></code></pre></td></tr></table></figure></li>
<li><p>安装docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo apt install docker.io<br></code></pre></td></tr></table></figure></li>
<li><p>检查docker安装是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker -v<br></code></pre></td></tr></table></figure></li>
<li><p>docker安装成功后，需要安装compose</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt install docker-compose<br></code></pre></td></tr></table></figure></li>
</ol>
<p>参考：<a href="https://blog.csdn.net/aodechudawei/article/details/122450720">kali安装docker</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
